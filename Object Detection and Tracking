#Install Required Libraries:
pip install tensorflow opencv-python
#Download YOLOv4
git clone https://github.com/AlexeyAB/darknet.git
cd darknet
#Download Pre-trained Weights
wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights
#Convert YOLOv4 to TensorFlow
python darknet2tensorflow.py --weights ./yolov4.weights --output ./checkpoints/yolov4-416


#Object Detection and Tracking in Video Stream


import cv2
import numpy as np
from tensorflow.keras.models import load_model

# Load YOLOv4 model
net = cv2.dnn.readNetFromTensorflow('path_to_your_yolov4_model.pb', 'path_to_your_yolov4_config.pbtxt')

# Function to perform object detection
def detect_objects(frame):
    blob = cv2.dnn.blobFromImage(frame, 1 / 255.0, (416, 416), swapRB=True, crop=False)
    net.setInput(blob)
    layer_names = net.getLayerNames()
    output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]
    outputs = net.forward(output_layers)

    boxes = []
    confidences = []
    class_ids = []

    for output in outputs:
        for detection in output:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:
                center_x = int(detection[0] * frame.shape[1])
                center_y = int(detection[1] * frame.shape[0])
                w = int(detection[2] * frame.shape[1])
                h = int(detection[3] * frame.shape[0])
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    indices = cv2.dnn.NMSBoxes(boxes, confidences, score_threshold=0.5, nms_threshold=0.4)
    
    if len(indices) > 0:
        for i in indices.flatten():
            x, y, w, h = boxes[i]
            label = str(class_ids[i])
            confidence = confidences[i]
            color = (255, 0, 0)  # Example color
            cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
            cv2.putText(frame, label, (x, y - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)

    return frame

# Open video stream
cap = cv2.VideoCapture('path_to_your_video_file.mp4')  # Replace with 0 for webcam

while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    # Perform object detection
    frame = detect_objects(frame)
    
    # Display the frame
    cv2.imshow('Object Detection', frame)
    
    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        break

# Release the video capture object and close all windows
cap.release()
cv2.destroyAllWindows()
